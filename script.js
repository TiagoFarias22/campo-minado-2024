// Define o tamanho do tabuleiro e a quantidade de bombas
const boardSize = 10;  // O tabuleiro ter√° 10x10 c√©lulas
const bombCount = 15;  // Ser√£o colocadas 15 bombas aleat√≥rias no tabuleiro

// Inicializa vari√°veis principais
let board = [];  // Esse array vai armazenar o estado do jogo (cada c√©lula ter√° informa√ß√µes sobre bomba e revela√ß√£o)
let gameBoardElement = document.getElementById('game-board');  // Captura o elemento HTML onde o tabuleiro ser√° renderizado
let resetGameButton = document.getElementById('reset-game');  // Captura o bot√£o de reset para reiniciar o jogo

// Fun√ß√£o para gerar o tabuleiro do jogo e colocar as bombas
function generateBoard() {
  board = [];  // Inicializa o array que vai representar o tabuleiro

  // Loop para criar as c√©lulas do tabuleiro (linhas e colunas)
  for (let x = 0; x < boardSize; x++) {
    board[x] = [];  // Cria uma linha no tabuleiro
    for (let y = 0; y < boardSize; y++) {
      // Cada c√©lula √© um objeto que tem informa√ß√µes sobre se tem bomba, se est√° revelada e o n√∫mero de bombas adjacentes
      board[x][y] = {
        bomb: false,  // Inicialmente, nenhuma c√©lula tem bomba
        revealed: false,  // As c√©lulas come√ßam como n√£o reveladas
        count: 0  // Inicialmente, o n√∫mero de bombas ao redor √© 0
      };
    }
  }

  // Coloca as bombas aleatoriamente no tabuleiro
  let bombsPlaced = 0;  // Contador de bombas colocadas
  while (bombsPlaced < bombCount) {  // Repete at√© que todas as bombas sejam colocadas
    const x = Math.floor(Math.random() * boardSize);  // Gera uma posi√ß√£o X aleat√≥ria
    const y = Math.floor(Math.random() * boardSize);  // Gera uma posi√ß√£o Y aleat√≥ria
    if (!board[x][y].bomb) {  // Verifica se a c√©lula j√° tem bomba
      board[x][y].bomb = true;  // Coloca uma bomba nessa c√©lula
      bombsPlaced++;  // Incrementa o contador de bombas
    }
  }

  // Calcula o n√∫mero de bombas ao redor de cada c√©lula que n√£o tem bomba
  for (let x = 0; x < boardSize; x++) {
    for (let y = 0; y < boardSize; y++) {
      if (!board[x][y].bomb) {  // Se a c√©lula n√£o tem bomba
        let count = 0;  // Conta quantas bombas est√£o ao redor
        // Verifica todas as 8 c√©lulas adjacentes (incluindo diagonais)
        for (let i = -1; i <= 1; i++) {
          for (let j = -1; j <= 1; j++) {
            const newX = x + i;  // Calcula a nova posi√ß√£o X
            const newY = y + j;  // Calcula a nova posi√ß√£o Y
            // Verifica se a c√©lula adjacente est√° dentro dos limites e se tem bomba
            if (newX >= 0 && newX < boardSize && newY >= 0 && newY < boardSize && board[newX][newY].bomb) {
              count++;  // Incrementa o contador de bombas adjacentes
            }
          }
        }
        board[x][y].count = count;  // Armazena o n√∫mero de bombas ao redor na c√©lula
      }
    }
  }

  renderBoard();  // Renderiza o tabuleiro visualmente
}

// Fun√ß√£o para renderizar o tabuleiro no HTML
function renderBoard() {
  gameBoardElement.innerHTML = '';  // Limpa o conte√∫do do tabuleiro antes de renderizar
  for (let x = 0; x < boardSize; x++) {  // Itera sobre as linhas
    for (let y = 0; y < boardSize; y++) {  // Itera sobre as colunas
      const cell = document.createElement('div');  // Cria um elemento <div> para representar a c√©lula
      cell.classList.add('cell');  // Adiciona a classe 'cell' ao elemento
      cell.dataset.x = x;  // Armazena a posi√ß√£o X da c√©lula (usado para refer√™ncia ao clicar)
      cell.dataset.y = y;  // Armazena a posi√ß√£o Y da c√©lula

      // Se a c√©lula foi revelada, mostra seu conte√∫do
      if (board[x][y].revealed) {
        cell.classList.add('revealed');  // Adiciona a classe 'revealed' para estilizar a c√©lula revelada
        if (board[x][y].bomb) {
          cell.classList.add('bomb');  // Adiciona a classe 'bomb' para estilizar as bombas
          cell.innerHTML = 'üí£';  // Insere um √≠cone de bomba na c√©lula
        } else if (board[x][y].count > 0) {
          cell.innerHTML = board[x][y].count;  // Mostra o n√∫mero de bombas ao redor, se houver
        }
      }

      // Adiciona um evento de clique para a c√©lula
      cell.addEventListener('click', onCellClick);
      gameBoardElement.appendChild(cell);  // Adiciona a c√©lula ao tabuleiro no HTML
    }
  }
}

// Fun√ß√£o que lida com o clique em uma c√©lula
function onCellClick(e) {
  const x = parseInt(e.target.dataset.x);  // Pega a posi√ß√£o X da c√©lula clicada
  const y = parseInt(e.target.dataset.y);  // Pega a posi√ß√£o Y da c√©lula clicada

  if (board[x][y].revealed) return;  // Se a c√©lula j√° foi revelada, n√£o faz nada

  if (board[x][y].bomb) {  // Se a c√©lula clicada tem bomba
    revealAllBombs();  // Revela todas as bombas no tabuleiro
    alert('Game Over! Vc clicou numa mina!');  // Exibe um alerta de fim de jogo
  } else {
    revealCell(x, y);  // Revela a c√©lula clicada e suas adjac√™ncias, se aplic√°vel
    renderBoard();  // Atualiza o tabuleiro visualmente
    if (checkWin()) {  // Verifica se o jogador ganhou
      alert('Parab√©ns, vc ganhou!');  // Exibe uma mensagem de vit√≥ria
    }
  }
}

// Fun√ß√£o que revela uma c√©lula e suas adjac√™ncias se n√£o houver bombas por perto
function revealCell(x, y) {
  // Verifica se a c√©lula est√° dentro dos limites do tabuleiro e se j√° foi revelada
  if (x < 0 || x >= boardSize || y < 0 || y >= boardSize || board[x][y].revealed) return;

  board[x][y].revealed = true;  // Marca a c√©lula como revelada

  // Se n√£o houver bombas ao redor, revela tamb√©m as c√©lulas adjacentes
  if (board[x][y].count === 0) {
    for (let i = -1; i <= 1; i++) {  // Itera pelas c√©lulas vizinhas
      for (let j = -1; j <= 1; j++) {
        revealCell(x + i, y + j);  // Chama recursivamente a fun√ß√£o para revelar as c√©lulas vizinhas
      }
    }
  }
}

// Fun√ß√£o que revela todas as bombas no tabuleiro (quando o jogo termina)
function revealAllBombs() {
  for (let x = 0; x < boardSize; x++) {  // Itera sobre o tabuleiro
    for (let y = 0; y < boardSize; y++) {
      if (board[x][y].bomb) {  // Se a c√©lula tem bomba
        board[x][y].revealed = true;  // Revela a bomba
      }
    }
  }
  renderBoard();  // Atualiza a visualiza√ß√£o do tabuleiro
}

// Fun√ß√£o que verifica se o jogador ganhou o jogo
function checkWin() {
  let revealedCells = 0;  // Contador de c√©lulas reveladas
  for (let x = 0; x < boardSize; x++) {  // Itera sobre o tabuleiro
    for (let y = 0; y < boardSize; y++) {
      // Conta todas as c√©lulas que foram reveladas e que n√£o t√™m bombas
      if (board[x][y].revealed && !board[x][y].bomb) {
        revealedCells++;
      }
    }
  }
  // Verifica se todas as c√©lulas n√£o-bombas foram reveladas
  return revealedCells === (boardSize * boardSize - bombCount);
}

// Fun√ß√£o para reiniciar o jogo
function resetGame() {
  generateBoard();  // Gera um novo tabuleiro
}

// Adiciona um evento de clique ao bot√£o de reset para reiniciar o jogo
resetGameButton.addEventListener('click', resetGame);

// Inicializa o jogo quando a p√°gina √© carregada
generateBoard();
